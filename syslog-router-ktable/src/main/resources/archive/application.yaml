spring:
  profiles:
    active: local

---
spring.config:
  activate:
    on-profile: local
name: local-YAML
environment: local
enabled: true

########### Spring Cloud Stream Configuration

spring.cloud.stream:
  function:
    definition: dynamicRouteSyslogMessages
    bindings:
      dynamicRouteSyslogMessages-in-0: kstreams.test.input

  kafka:
    streams:
      binder:
        applicationId: ks-syslog-router-app
        deserializationExceptionHandler: logAndContinue
        configuration:
          spring.json.trusted.packages: "*"
          ##num.stream.threads: 1
          commit.interval.ms: 2000
          #cache.max.bytes.buffering: 0
          state.dir: state-store
          default:
            #key.serde: org.apache.kafka.common.serialization.Serdes$StringSerde
            #value.serde: org.apache.kafka.common.serialization.Serdes$StringSerde
              #value.serde: io.confluent.kafka.streams.serdes.avro.GenericAvroSerde
              #value.serde: io.confluent.kafka.streams.serdes.avro.SpecificAvroSerde
              #security:
              #protocol: SSL
              #ssl:
              #truststore:
              # location: c:/tmp/kstreams/confluent-dev/kafkaclient-truststore.jks
              #password: mystorepassword
              #type: JKS
              #keystore:
              # location: c:/tmp/kstreams/confluent-dev/kafkaclient-keystore.jks
            #password: mystorepassword
        brokers: localhost:9092







---
##################### PRODUCTION PROFILE ###################################
############################################################################
spring.config:
  activate:
    on-profile: prod
name: syslog-kstreamrouter-prod-YAML
environment: syslog-kstreamrouter-prod
enabled: true


########### Spring Cloud Stream Configuration

spring.cloud.stream:
  function:
    definition: dynamicRouteSyslogMessages
    bindings:
      dynamicRouteSyslogMessages-in-0: kstreams.test.input

  kafka:
    streams:
      binder:
        applicationId: ks-syslog-router-app
        deserializationExceptionHandler: logAndContinue
        configuration:
          ##num.stream.threads: 1
          commit.interval.ms: 2000
          #cache.max.bytes.buffering: 0
          state.dir: state-store
          default:
            key.serde: org.apache.kafka.common.serialization.Serdes$StringSerde
            value.serde: org.apache.kafka.common.serialization.Serdes$StringSerde
              #value.serde: io.confluent.kafka.streams.serdes.avro.GenericAvroSerde
              #value.serde: io.confluent.kafka.streams.serdes.avro.SpecificAvroSerde
              #security:
              #protocol: SSL
              #ssl:
              #truststore:
              #location: c:/tmp/kstreams/confluent-dev/kafkaclient-truststore.jks
              #password: mystorepassword
              #type: JKS
              #keystore:
              #location: c:/tmp/kstreams/confluent-dev/kafkaclient-keystore.jks
            #password: mystorepassword
        brokers: ec2-3-237-47-138.compute-1.amazonaws.com:9093



